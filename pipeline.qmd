---
title: "final_pipeline"
format: html
editor: visual
---

## Reading in packages

```{r}
#| messages: false
#| warnings: false
library(tidyverse)
library(here)
library(lubridate)
library(plotly)
library(janitor)
library(zoo)
```

## Reading in Required data

```{r}
# From OASIS
DAM <- read_csv(here("data_final_pipeline/DAM.csv"))
RTM <- read_csv(here("data_final_pipeline/RTM.csv"))
interchange <- read_csv(here("data_final_pipeline/interchange.csv"))

a <- RTM |> 
  filter(LMP_TYPE == "LMP") |> 
  group_by(OPR_DT, OPR_HR, NODE_ID) |> 
  mutate(value = mean(VALUE)) |> 
  ungroup() |> 
  distinct(OPR_DT, OPR_HR, NODE_ID, .keep_all = TRUE) |> 
  select(OPR_DT, OPR_HR, NODE_ID, value) |> 
  mutate(OPR_HR = as.character(OPR_HR))

b <- DAM |> 
  filter(LMP_TYPE == "LMP") |> 
  select(OPR_DT, OPR_HR, NODE_ID, MW) |> 
  mutate(OPR_HR = as.character(OPR_HR))

price_data <- b |> 
  inner_join(a, by = c("OPR_DT", "OPR_HR", "NODE_ID")) |> 
  mutate(unique_time = paste0(OPR_DT," ", OPR_HR),
         # time fails to parse with hour = 25, ignore since only 4 values
         time = lubridate::parse_date_time(unique_time, "%Y-%m-%d %H")) |> 
  filter(!is.na(time)) |> 
  select(!c(OPR_DT, OPR_HR)) |> 
  pivot_longer(cols = c(MW, value)) |> 
  mutate(name = case_when(
    name == "MW" ~ "DAM",
    name == "value" ~ "RTM"
  )) |> 
  rename("$ Price Per MW" = value) |> 
  mutate(OPR_DT = as.Date(time)) |> 
  select(!c(unique_time))


# From EIA where two halves of 2024 are merged
interchange <- interchange |> 
  mutate(utc_time_at_end_of_hour = parse_date_time(utc_time_at_end_of_hour,
                                                   orders = c("%m/%d/%Y %H:%M:%S %p"))) |> 
  clean_names()

# From OASIS
outage <- read_csv("data_final_pipeline/outageFull.csv")

# From HerbieData
weather <- read_csv("data_final_pipeline/fullWeatherData.csv")
```

## Individual Functions

### plot_rtm

```{r}
plot_rtm <- function(date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2)
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
  # price data
  x <- ggplotly(
  price_data |> 
    filter(between(time, date1, date2)) |> 
    ggplot() +
    geom_line(aes(x = time, y = `$ Price Per MW`, color = name)) +
    theme_minimal() 
  )
  
  return(x)
}

plot_rtm(date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_lmp

```{r}
plot_lmp <- function(date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2)
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
  # price data
  x <- ggplotly(
  price_data |> 
    filter(between(time, date1, date2)) |> 
    ggplot() +
    geom_line(aes(x = time, y = `$ Price Per MW`, color = name)) +
    facet_wrap(~NODE_ID) +
    theme_minimal() 
  )
  
  return(x)
}

plot_lmp(date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_weather

```{r}
plot_weather <- function(plant_name, date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2)
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
x <- ggplotly(
  weather |> 
  filter(grepl(plant_name, Plant_Name, ignore.case = TRUE)) |> 
  filter(between(time, date1, date2)) |>
  ggplot(aes(x = time, y = `Temp (F)`)) +
  geom_line()
)

return(x)
}

plot_weather(plant_name = "El Segundo", date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_plant_outage

```{r}
plot_plant_outage <- function(plant_name, date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2) 
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
  plot <- outage |>
    filter(grepl(plant_name, `RESOURCE NAME`, ignore.case = TRUE)) |>
    filter(between(as.Date(`CURTAILMENT START DATE TIME`), date1, date2)) |> 
    mutate(Percent = (`CURTAILMENT MW` / `RESOURCE PMAX MW`) * 100) |>
    ggplot(aes(x = `CURTAILMENT START DATE TIME`,
               y = Percent,
               color = `NATURE OF WORK`)) +
    geom_segment(aes(xend = `CURTAILMENT END DATE TIME`, yend = Percent))
    labs(title = paste("Outages for", plant_name),
         x = "Start Date", y = "Curtailment %") +
    facet_wrap(~`OUTAGE TYPE`) +
    theme_minimal()

  return(ggplotly(plot))
}

plot_plant_outage(plant_name = "El Segundo", date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_exports

```{r}
plot_exports <- function(date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2)
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
   interchange_temp <- interchange |>
    filter(between(utc_time_at_end_of_hour, date1, date2))
  

  #Negative
  neg <- interchange_temp |>
    mutate(export = case_when(
      interchange_mw <= 0 ~ 0,
      .default = interchange_mw
    )) |>
    filter(export >= 0) |>
    mutate(day = as_datetime(utc_time_at_end_of_hour)) |>
    group_by(day_of = as_date(day)) |>
    dplyr::summarize(export_sum = sum(export, na.rm = TRUE)) |>
    mutate(roll_export_mean = rollmean(export_sum, k = 3, fill = NA))

  # Positive
  pos <- interchange_temp |>
    mutate(import = case_when(
      interchange_mw >= 0 ~ 0,
      .default = interchange_mw
    )) |>
    filter(import <= 0) |>
    mutate(import = import * -1) |>
    mutate(day = as_datetime(utc_time_at_end_of_hour)) |>
    group_by(day_of = as_date(day)) |>
    dplyr::summarize(import_sum = sum(import)) |>
    mutate(roll_import_mean = rollmean(import_sum, k = 3, fill = NA))

    print(
      ggplotly(
      neg |>
        inner_join(pos, by = join_by(day_of)) |>
        select(day_of, roll_export_mean, roll_import_mean) |>
        mutate(`Export - Import` = roll_export_mean - roll_import_mean) |>
        pivot_longer(cols = c("roll_export_mean", "roll_import_mean", `Export - Import`)) |>
        ggplot(aes(x = day_of, y = value, color = name)) +
        geom_line() +
        theme_minimal() +
        ggtitle(paste0("Export and Import Overview between ", date1, " and ", date2))))

    print(
    ggplotly(interchange_temp |>
    mutate(`Export - Import` = interchange_mw) |>
    ggplot(aes(x = utc_time_at_end_of_hour, y = `Export - Import`,
               color = directly_interconnected_balancing_authority)) +
    geom_smooth(se = FALSE) +
    theme_minimal()))
}

plot_exports(date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_curtailment_ratios

```{r}
plot_forced_curtailment <- function(date1 = "2024-01-01",
                     date2 = "2025-01-01") {
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2) 
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
  
outage_avg <- outage |>
  filter(between(as.Date(`CURTAILMENT START DATE TIME`), date1, date2)) |>
  filter(`OUTAGE TYPE` == "FORCED") |>
  mutate(percent = `CURTAILMENT MW` / `RESOURCE PMAX MW`) |>
  group_by(`RESOURCE NAME`) |>
  dplyr::summarize(avg = mean(percent))

print(outage_avg)

  plot <- ggplotly(
  outage_avg |>
    left_join(unique(outage |> select(`RESOURCE NAME`, `RESOURCE PMAX MW`))) |>
    ggplot(aes(x = `RESOURCE PMAX MW`, y = avg, group = `RESOURCE NAME`)) +
    geom_point()
  )
  return(plot)
}

plot_forced_curtailment(date1 = "2024-01-01", date2 = "2024-02-01")
```

### plot_curtailment

```{r}
plot_curtailment <- function(date1 = "2024-01-01",
                     date2 = "2025-01-01",
                     percent_cutoff = 50) {
  date1 <- as_datetime(date1)
  date2 <- as_datetime(date2) 
  
  if (date1 > date2) {
    stop("date1 needs to be earlier than date 2")
  }
  
  plot <- outage |>
    filter(between(as.Date(`CURTAILMENT START DATE TIME`), date1, date2)) |>
    filter(between(as.Date(`CURTAILMENT END DATE TIME`), date1, date2)) |> 
    mutate(Percent = (`CURTAILMENT MW` / `RESOURCE PMAX MW`) * 100) |>
    filter(Percent > percent_cutoff) |> 
    filter(`OUTAGE TYPE` == "FORCED") |> 
    ggplot(aes(x = `CURTAILMENT START DATE TIME`, 
               y = `CURTAILMENT MW`,
               color = `RESOURCE NAME`)) +
    geom_segment(aes(xend = `CURTAILMENT END DATE TIME`, yend = `CURTAILMENT MW`)) +
    labs(title = paste("Outages"),
         x = "Start Date", y = "Curtailment (MW)") +
    theme_minimal() +
    facet_wrap(~`NATURE OF WORK`)
    

  return(ggplotly(plot))
}

plot_curtailment(date1 = "2024-01-01", date2 = "2024-02-01", percent_cutoff = 50)
```
